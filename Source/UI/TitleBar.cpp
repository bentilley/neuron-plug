/*
 * TitleBar.cpp
 * Copyright (C) 2020 Ben Tilley <targansaikhan@gmail.com>
 *
 * Distributed under terms of the MIT license.
 */

#include "TitleBar.hpp"
#include "Styles.hpp"

TitleBar::TitleBar(WellsAudioProcessor& p)
    : onOffButton(p), globalVolumeSlider(p), maxNoteLengthSlider(p), volumeRange(p)
{
  addAndMakeVisible(onOffButton);
  addAndMakeVisible(globalVolumeSlider);
  addAndMakeVisible(maxNoteLengthSlider);
  addAndMakeVisible(volumeRange);
}

void TitleBar::paint(Graphics& g)
{
  auto area = getLocalBounds();
  auto bottomBorder = area.removeFromBottom(bottomBorderPx);

  g.setColour(AppStyle.darkGrey);
  g.fillRect(area);
  g.setColour(AppStyle.mediumGrey);
  g.fillRect(bottomBorder);
}

void TitleBar::resized()
{
  auto area = getLocalBounds();
  area.removeFromBottom(bottomBorderPx);

  auto controlsArea = area.removeFromLeft(AppStyle.titleBarPowerButtonWidth);
  AppStyle.titleBarComponentPadding.subtractFrom(controlsArea);
  onOffButton.setBounds(controlsArea);

  globalVolumeSlider.setBounds(area.removeFromLeft(AppStyle.titleBarRotarySliderWidth));

  maxNoteLengthSlider.setBounds(area.removeFromLeft(AppStyle.titleBarRotarySliderWidth));

  controlsArea = area.removeFromRight(AppStyle.titleBarRangeSliderWidth);
  AppStyle.titleBarComponentPadding.subtractFrom(controlsArea);
  volumeRange.setBounds(controlsArea);
}

void TitleBar::updateComponents()
{
  // TODO only update GUI when needed
  onOffButton.updateComponent();
  globalVolumeSlider.updateComponent();
  volumeRange.updateComponent();
}

PluginOnOffButton::PluginOnOffButton(WellsAudioProcessor& p) : OnOffButton(p)
{
  setTooltip("turn plugin on or off");
  onClick = [this]() { processor.midiGenerator->toggleOnOff(); };
}

void PluginOnOffButton::updateComponent()
{
  setColour(
    TextButton::ColourIds::buttonColourId,
    processor.midiGenerator->getIsOn() ? AppStyle.buttonOnColour : AppStyle.buttonOffColour
  );
}

GlobalVolumeSlider::GlobalVolumeSlider(WellsAudioProcessor& p) : RotarySliderWithLabel(p, "Volume")
{
  slider.setTooltip("global volume");
  slider.setRange(0.0, 1.0, 0.00);
  slider.setNumDecimalPlacesToDisplay(2);
  slider.onValueChange = [this]() { processor.midiGenerator->set_volume(slider.getValue()); };
}

void GlobalVolumeSlider::updateComponent()
{
  slider.setValue(processor.midiGenerator->get_volume());
}

MaxNoteLengthSlider::MaxNoteLengthSlider(WellsAudioProcessor& p)
    : RotarySliderWithLabel(p, "Max Note Length")
{
  slider.setTooltip("the maximum length of MIDI notes generated by the plugin (in samples)");
  slider.setRange(0.0, 44100.0, 100.0);
  slider.onValueChange = [this]() {
    processor.midiGenerator->setMidiOutputWriterMaxNoteLength(slider.getValue());
  };
}

void MaxNoteLengthSlider::updateComponent()
{
  slider.setValue(processor.midiGenerator->getMidiOutputWriterMaxNoteLength());
}

VolumeRangeSlider::VolumeRangeSlider(WellsAudioProcessor& p)
    : Slider("MIDI Volume Range"), processor(p)
{
  setTooltip("volume range");
  setSliderStyle(Slider::TwoValueHorizontal);
  setRange(0, 1, 0.01);
  setTextBoxStyle(Slider::NoTextBox, false, 10, 0);
  setPopupDisplayEnabled(true, false, getParentComponent());
  onValueChange = [this]() {
    processor.midiGenerator->set_volume_clip(getMinValue(), getMaxValue());
  };
}

void VolumeRangeSlider::updateComponent()
{
  setMinValue(processor.midiGenerator->get_volume_clip_min());
  setMaxValue(processor.midiGenerator->get_volume_clip_max());
}
