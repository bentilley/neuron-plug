' midi-input-sequence-diagram.plantuml
' Copyright (C) 2020 Ben Tilley <targansaikhan@gmail.com>
'
' Distributed under terms of the MIT license.

@startuml

header Midi Input Sequence Diagram
title Midi Input Sequence Diagram

participant "Plugin"
participant "Audio Thread" as Audio
participant "MIDI Generator" as Generator
participant "Beat Clock" as Clock
participant "MIDI Input Trasformer" as Transformer
participant "Input Filter" as Filter
participant "Brain" as Brain
participant "MIDI Output Writer" as Writer

Plugin -> Audio : processBlock()
note over Audio : the following diagram\nassumes that the plugin is\non etc.
activate Audio
Audio -> Generator : generate_next_midi_buffer(\n  &MIDIBuffer,\n  AudioPosInfo,\n  &MIDIOut,\n  sampleRate\n)
activate Generator

group if "Input Generation" is on
  Generator -> Clock : getModelInputForBuffer(\n  &PositionInfo,\n  &SystemInfo\n)
  activate Clock
  note over Clock : calculate generated input\nticks for this buffer
  return **vector<ModelVector>**\nGeneratedInput
end

group if "MIDI Throughput" is on
  Generator -> Transformer : getModelInputForBuffer(\n  &MIDIBuffer\n)
  activate Transformer
  note over Transformer : calculate MIDI input\nticks for this buffer
  return **vector<ModelVector>**\nMIDIInput
end

Generator -> Filter : mergeInputStreams(\n  &vector<vector<ModelVector>>\n)
activate Filter
note over Filter : handle merging multiple\nticks if necessary i.e.\ninput vectors only one\ntick apart
return **vector<ModelVector>**\n&input

Generator -> Brain : step(&input)
activate Brain
note over Brain : performs one step of the\nMIDI generation algorithm
return **vector<ModelVector>**\n&output

Generator -> Writer : writeMidiOutput(\n  &output, &midiOut\n)
activate Writer
note over Writer : remembers what notes are\nplaying and sequences the\nrelevant ON/OFF MIDI\nevents
return &midiOut

return **&midiOut**

return
@enduml
